---
interface Props {
  numDots?: number;
}

const ANIMATION_DURATION = 8; // Pacman's movement duration in seconds
const OFFSET = 0.3; // Initial delay before first dot disappears

// Add a unique ID for this instance
const uniqueId = `pacman-${Math.random().toString(36).substr(2, 9)}`;
---
<div class="pacman-rail"></div>

<div class="pacman-container" id={uniqueId}>
  <div class="dots">
    <div class="dot-row"></div>
  </div>
  
  <div class="wake"></div>
  
  <div class="pacman"></div>
</div>
<div class="pacman-rail"></div>

<script define:vars={{ uniqueId }}>
  // Create intersection observer
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate');
        observer.unobserve(entry.target);
      }
    });
  });

  // Start observing the container
  const container = document.getElementById(uniqueId);
  if (container) observer.observe(container);
</script>

<style>
  .pacman-container {
    position: relative;
    width: 100%;
    height: 50px;
    overflow: visible;
    display: flex;
    align-items: center;
    margin: 10px 0;
  }

  .pacman-rail {
    content: '';
    position: absolute;
    width: 100%;
    height: 3px;
    background-color: #4a9eff; /* Rail color - adjust as needed */
    box-shadow: 
      0 0 5px #4a9eff,
      0 0 10px #4a9eff,
      0 0 15px #4a9eff;
  }

  .pacman {
    width: 30px;
    height: 30px;
    position: absolute;
    top: 15px;
    left: -25px; /* Match wake's starting position */
  }

  .pacman::before, .pacman::after {
    content: '';
    display: block;
    width: 30px;
    height: 30px;
    background: transparent;
    border-radius: 50%;
    position: absolute;
    border: 15px solid yellow;
    border-right: 15px solid transparent;
  }

  .pacman::before {
    animation: chomp 0.3s ease-in-out infinite;
  }

  .pacman::after {
    animation: chomp-2 0.3s ease-in-out infinite;
  }

  /* Only apply animations when .animate class is present */
  .animate .pacman {
    animation: move 8s linear forwards;
    animation-delay: 1s;
  }

  @keyframes move {
    0% {
      left: -25px;  /* Match wake's starting position */
      opacity: 1;
    }
    99% {
      left: calc(100% + 25px);  /* Match wake's end position */
      opacity: 1;
    }
    100% {
      left: calc(100% + 25px);
      opacity: 0;
    }
  }

  @keyframes chomp {
    0% {
      transform: rotate(0deg);
    }
    50% {
      transform: rotate(45deg);
    }
    100% {
      transform: rotate(0deg);
    }
  }

  @keyframes chomp-2 {
    0% {
      transform: rotate(0deg);
    }
    50% {
      transform: rotate(-45deg);
    }
    100% {
      transform: rotate(0deg);
    }
  }

  .dots {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 25px;
  }

  .dot-row {
    width: 100%;
    height: 8px;
    background-image: radial-gradient(
      circle at center,
      white 0px,
      white 4px,
      transparent 4px,
      transparent 100%
    );
    transform: translateY(2px);
    background-size: 30px 8px;
    background-repeat: repeat-x;
    background-position: center;
  }

  .wake {
    position: absolute;
    height: 50%;
    background: oklch(var(--b1)); /* Changed to use DaisyUI's base color to match the background */
    width: calc(100% + 50px);
    transform: scaleX(0);
    transform-origin: left;
    left: -25px;
    top: 25px;
  }

  .animate .wake {
    animation: expand 8s linear forwards;
    animation-delay: 1s;
  }

  @keyframes expand {
    0% {
      transform: scaleX(0);
    }
    99%, 100% {
      transform: scaleX(1);  /* Match Pacman's movement ratio */
    }
  }

  /* Keep initial states during delay */
  .animate .pacman {
    opacity: 0;
    animation: move 8s linear forwards 1s;
  }

  .animate .wake {
    transform: scaleX(0);
    animation: expand 8s linear forwards 1s;
  }

</style>