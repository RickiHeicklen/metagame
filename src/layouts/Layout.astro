---
import "@fontsource/jura/latin.css";
import Nav from "../components/Nav.astro";
import Footer from "../components/Footer.astro";
import { ViewTransitions } from "astro:transitions";
import { SEO } from "astro-seo";
// import { getImagePath } from "astro-opengraph-images";
import { KbarApp } from "../components/Kbar/App";
import CoinCounter from '../components/CoinCounter';

interface Props {
  title: string;
}

const { title } = Astro.props;
const { url, site } = Astro;

// const openGraphImageUrl = getImagePath({ url, site });
const imageURL = "/logo.svg";
---

<!doctype html>
<html lang="en" class="bg-dark-500 text-white dark" data-theme="synthwave">
  <head>
    <SEO
      openGraph={{
        basic: {
          title: `${title}`,
          type: "website",
          image: imageURL,
          url: url,
        },
        optional: {
          description:
            "METAGAME 2025: a conference for game design, strategy, narrative, and play",
        },
      }}
    />
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="A description for your event"
    />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/logo.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title} | METAGAME 2025 </title>
    <ViewTransitions />
  </head>
  <body class="relative overflow-x-hidden flex flex-col min-h-screen">
    <KbarApp client:load>
      <Nav transition:name="nav" />

      <div
        class="relative overflow-x-hidden flex-grow pt-[80px]"
        transition:name="main"
      >
        <slot />
      </div>

      <Footer transition:name="footer" />
      <!-- <div id="highlighter"></div> -->
      <style>
        html {
          scroll-behavior: smooth;
        }
      </style>

      <script>
        function initToggles() {
          const collapses = document.querySelectorAll<HTMLElement>(
            "[data-collapse-toggle]"
          );

          const toggleCollapse = (target: HTMLElement) => {
            const toggle = target.getAttribute("data-collapse-toggle")!;
            const toggleElement = document.getElementById(toggle)!;
            toggleElement?.classList.toggle("hidden");
          };

          collapses.forEach((el) => {
            el.addEventListener("click", () => toggleCollapse(el));
          });
        }

        // const r = document.querySelector(":root")! as HTMLElement;

        // const updateHighlighter = (ev: MouseEvent) => {
        //   r.style.setProperty("--hleft", `${ev.pageX - 200}px`);
        //   r.style.setProperty("--htop", `${ev.pageY - 200}px`);
        // };

        // let isTicking = false;

        // document.addEventListener("mousemove", (ev) => {
        //   if (!isTicking) {
        //     window.requestAnimationFrame(() => {
        //       updateHighlighter(ev);
        //       isTicking = false;
        //     });
        //     isTicking = true;
        //   }
        // });

        initToggles();

        document.addEventListener("astro:after-swap", () => {
          initToggles();
        });

        // Handle meta game modal for speaker-2
        function initMetaGameModal() {
          const metagameModal = document.getElementById('metagame-modal');
          
          // Check if we arrived here via METAGAME link
          if (window.location.hash === '#speakers' && sessionStorage.getItem('metagame-trigger')) {
            sessionStorage.removeItem('metagame-trigger');
            
            // Wait a brief moment for the page to scroll to the section
            setTimeout(() => {
              if (metagameModal) {
                metagameModal.showModal();
              }
            }, 800);
          }
          
          // Handle clicks on any link
          document.addEventListener('click', (event) => {
            const target = event.target.closest('a');
            if (!target) return;
            
            // Check if the clicked link is specifically the METAGAME link in the speakers section
            if (target.getAttribute('href') === '/#speakers' && 
                target.textContent.trim() === 'METAGAME') {
              // Don't prevent default - let it open in a new tab
              // Instead, set a flag in sessionStorage
              sessionStorage.setItem('metagame-trigger', 'true');
            }
          });
        }

        initMetaGameModal();

        document.addEventListener("astro:after-swap", () => {
          initToggles();
          initMetaGameModal();
        });

        document.addEventListener('DOMContentLoaded', function() {
          // Check for the metagame parameter in the URL
          const urlParams = new URLSearchParams(window.location.search);
          const showMetaModal = urlParams.get('metagame') === 'true';
          
          if (showMetaModal && window.location.hash === '#speakers') {
            // First scroll to the speakers section
            const speakersSection = document.getElementById('speakers');
            if (speakersSection) {
              speakersSection.scrollIntoView({ behavior: 'smooth' });
              
              // Wait a moment after scrolling to show the modal
              setTimeout(() => {
                const metagameModal = document.getElementById('metagame-modal');
                if (metagameModal) {
                  metagameModal.showModal();
                  
                  // Clean up the URL to remove the parameter without reloading
                  const newUrl = window.location.pathname + window.location.hash;
                  window.history.replaceState({}, document.title, newUrl);
                }
              }, 1000); // Longer delay to ensure scrolling completes
            }
          }
        });

        // Also handle the case of page transitions with Astro
        document.addEventListener("astro:page-load", function() {
          // Same code as above
          const urlParams = new URLSearchParams(window.location.search);
          const showMetaModal = urlParams.get('metagame') === 'true';
          
          if (showMetaModal && window.location.hash === '#speakers') {
            const speakersSection = document.getElementById('speakers');
            if (speakersSection) {
              speakersSection.scrollIntoView({ behavior: 'smooth' });
              
              setTimeout(() => {
                const metagameModal = document.getElementById('metagame-modal');
                if (metagameModal) {
                  metagameModal.showModal();
                  
                  const newUrl = window.location.pathname + window.location.hash;
                  window.history.replaceState({}, document.title, newUrl);
                }
              }, 1000);
            }
          }
        });

        // Meta game modal handling
        function checkAndShowMetaModal() {
          const urlParams = new URLSearchParams(window.location.search);
          const showMetaModal = urlParams.get('metagame') === 'true';
          
          if (showMetaModal) {
            // First scroll to the speakers section
            const speakersSection = document.getElementById('speakers');
            if (speakersSection) {
              speakersSection.scrollIntoView({ behavior: 'smooth' });
              
              // Wait a moment after scrolling to show the modal
              setTimeout(() => {
                const metagameModal = document.getElementById('metagame-modal');
                if (metagameModal) {
                  metagameModal.showModal();
                  
                  // Clean up the URL to remove the parameter without reloading
                  const newUrl = window.location.pathname + window.location.hash;
                  window.history.replaceState({}, document.title, newUrl);
                }
              }, 1500); // Delay to ensure scrolling completes
            }
          }
        }

        // Run the check on page load
        document.addEventListener('DOMContentLoaded', checkAndShowMetaModal);
        
        // Also run after page transitions (for Astro's view transitions)
        document.addEventListener('astro:page-load', checkAndShowMetaModal);
        
        // Also handle direct link clicks for browsers that don't support view transitions
        document.addEventListener('astro:after-swap', checkAndShowMetaModal);
      </script>

      <style is:global>
        :root {
          /* --hleft: 0;
          --htop: 0; */
          --dy: 1;
          --dx: 1;
          --dz: 0;
          --outrun: 0;
        }

        /*This was originally used for something to do with kbar but was breaking kbar so we commented it out*/
        /* [id]::before {
          content: "";
          display: block;
          height: 75px;
          margin-top: -75px;
          visibility: hidden;
        }
        /*End of thing that we commented out to fix kbar*/

        /*Who knows what this was for*/
        /* @media (min-width: 600px) {
          #highlighter {
            width: 400px;
            height: 400px;
            position: absolute;
            transition: 0.3s all;
            background: radial-gradient(
              circle,
              rgba(255, 255, 255, 1) 0%,
              rgba(0, 0, 0, 0) 40%,
              rgba(255, 255, 255, 0) 79%
            );
            mix-blend-mode: overlay;
            pointer-events: none;
            z-index: 1000;
            top: var(--htop);
            left: var(--hleft);
          }
        }
        @media (max-width: 600px) {
          #highlighter {
            display: none;
          }
        } */

        dialog.modal {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          display: flex;
          align-items: center;
          justify-content: center;
          background: rgba(0, 0, 0, 0.7);
          padding: 1rem;
          border: none;
          z-index: 1000;
        }

        dialog.modal::backdrop {
          background: rgba(0, 0, 0, 0.5);
        }

        dialog.modal .modal-box {
          max-width: 24rem;
          background: #2d1b69;
          color: white;
          border: 2px solid #4deeea;
          box-shadow: 0 0 15px rgba(77, 238, 234, 0.5);
          padding: 1.5rem;
          border-radius: 0.5rem;
        }

        dialog.modal button {
          background: #4deeea;
          color: #2d1b69;
          border: none;
          padding: 0.5rem 2rem;
          border-radius: 0.25rem;
          cursor: pointer;
          font-weight: bold;
          transition: all 0.3s;
        }

        dialog.modal button:hover {
          background: #34e2e4;
          transform: scale(1.05);
        }
      </style>
    </KbarApp>

    <!-- Meta game modal -->
    <dialog id="metagame-modal" class="modal">
      <div class="modal-box relative bg-dark-500 border-2 border-secondary-300 p-6 rounded-lg shadow-lg">
        <h3 class="font-bold text-xl text-secondary-200 mb-4">What did you think was going to happen?</h3>
        <div class="modal-action flex justify-center">
          <form method="dialog">
            <button class="btn bg-secondary-300 hover:bg-secondary-400 text-dark-800 font-bold py-2 px-4 rounded transition-all hover:scale-105">
              Okay fair
            </button>
          </form>
        </div>
      </div>
    </dialog>
  </body>
</html>
